<?php

/**
 * This file is part of the ChillDev FileManager bundle.
 *
 * @author Rafał Wrzeszcz <rafal.wrzeszcz@wrzasq.pl>
 * @copyright 2014 © by Rafał Wrzeszcz - Wrzasq.pl.
 * @version 0.1.3
 * @since 0.1.3
 * @package ChillDev\Bundle\FileManagerBundle
 */

namespace ChillDev\Bundle\FileManagerBundle\Tests\Controller;

use stdClass;

use ChillDev\Bundle\FileManagerBundle\Action\ActionsManager;
use ChillDev\Bundle\FileManagerBundle\Controller\ActionsController;
use ChillDev\Bundle\FileManagerBundle\Filesystem\Disk;
use ChillDev\Bundle\FileManagerBundle\Tests\BaseContainerTest;

use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;

use org\bovigo\vfs\vfsStream;

/**
 * @author Rafał Wrzeszcz <rafal.wrzeszcz@wrzasq.pl>
 * @copyright 2014 © by Rafał Wrzeszcz - Wrzasq.pl.
 * @version 0.1.3
 * @since 0.1.3
 * @package ChillDev\Bundle\FileManagerBundle
 */
class ActionsControllerTest extends BaseContainerTest
{
    /**
     * @version 0.1.3
     * @since 0.1.3
     */
    protected function setUpContainer()
    {
        parent::setUpContainer();

        $this->container->set('logger', $this->getMock('Symfony\\Bridge\\Monolog\\Logger', [], [], '', false));
    }

    /**
     * @test
     * @version 0.1.3
     * @since 0.1.3
     */
    public function handleAction()
    {
        $request = new Request();
        $toReturn = new stdClass();
        $path = 'test';

        vfsStream::setup(self::ROOT_DIR, null, [$path => '']);

        $action = $this->getMock(
            'ChillDev\\Bundle\\FileManagerBundle\\Action\\Handler\\HandlerInterface',
            ['getLabel', 'supports', 'handle']
        );
        $action->expects($this->once())
            ->method('handle')
            ->with(
                $this->identicalTo($request),
                $this->identicalTo($this->manager['id']),
                $this->equalTo($path)
            )
            ->will($this->returnValue($toReturn));

        $controller = new ActionsController();
        $controller->setContainer($this->container);
        $response = $controller->handleAction(
            $request,
            $action,
            $this->manager['id'],
            $path
        );

        $this->assertSame($toReturn, $response, 'ActionsController::handleAction() should return response generated by action handler.');
    }

    /**
     * @test
     * @expectedException Symfony\Component\HttpKernel\Exception\HttpException
     * @expectedExceptionMessage File path contains invalid reference that exceeds disk scope.
     * @version 0.1.3
     * @since 0.1.3
     */
    public function handleInvalidPath()
    {
        (new ActionsController())->handleAction(
            new Request(),
            $this->getMock('ChillDev\\Bundle\\FileManagerBundle\\Action\\Handler\\HandlerInterface'),
            new Disk('', '', ''),
            '/foo/../../'
        );
    }

    /**
     * @test
     * @expectedException Symfony\Component\HttpKernel\Exception\NotFoundHttpException
     * @expectedExceptionMessage File "[Test]/test" does not exist.
     * @version 0.1.3
     * @since 0.1.3
     */
    public function handleNonexistingPath()
    {
        (new ActionsController())->handleAction(
            new Request(),
            $this->getMock('ChillDev\\Bundle\\FileManagerBundle\\Action\\Handler\\HandlerInterface'),
            $this->manager['id'],
            'test'
        );
    }
}
